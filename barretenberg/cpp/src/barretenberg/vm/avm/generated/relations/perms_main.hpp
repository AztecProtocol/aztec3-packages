// AUTOGENERATED FILE
#pragma once

#include "barretenberg/relations/generic_permutation/generic_permutation_relation.hpp"

#include <cstddef>
#include <string_view>
#include <tuple>

namespace bb::avm {

/////////////////// perm_main_alu ///////////////////

class perm_main_alu_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 16;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_alu;
    static constexpr Column DST_SELECTOR = Column::alu_sel_alu;
    static constexpr Column INVERSES = Column::perm_main_alu_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_alu() == 1 || in.get_alu_sel_alu() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_alu_inv(),
                                     in.get_main_sel_alu(),
                                     in.get_main_sel_alu(),
                                     in.get_alu_sel_alu(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_main_sel_op_add(),
                                     in.get_main_sel_op_sub(),
                                     in.get_main_sel_op_mul(),
                                     in.get_main_sel_op_div(),
                                     in.get_main_sel_op_eq(),
                                     in.get_main_sel_op_not(),
                                     in.get_main_sel_op_cast(),
                                     in.get_main_sel_op_lt(),
                                     in.get_main_sel_op_lte(),
                                     in.get_main_sel_op_shr(),
                                     in.get_main_sel_op_shl(),
                                     in.get_main_alu_in_tag(),
                                     in.get_alu_clk(),
                                     in.get_alu_ia(),
                                     in.get_alu_ib(),
                                     in.get_alu_ic(),
                                     in.get_alu_op_add(),
                                     in.get_alu_op_sub(),
                                     in.get_alu_op_mul(),
                                     in.get_alu_op_div(),
                                     in.get_alu_op_eq(),
                                     in.get_alu_op_not(),
                                     in.get_alu_op_cast(),
                                     in.get_alu_op_lt(),
                                     in.get_alu_op_lte(),
                                     in.get_alu_op_shr(),
                                     in.get_alu_op_shl(),
                                     in.get_alu_in_tag());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_alu_inv(),
                                     in.get_main_sel_alu(),
                                     in.get_main_sel_alu(),
                                     in.get_alu_sel_alu(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_main_sel_op_add(),
                                     in.get_main_sel_op_sub(),
                                     in.get_main_sel_op_mul(),
                                     in.get_main_sel_op_div(),
                                     in.get_main_sel_op_eq(),
                                     in.get_main_sel_op_not(),
                                     in.get_main_sel_op_cast(),
                                     in.get_main_sel_op_lt(),
                                     in.get_main_sel_op_lte(),
                                     in.get_main_sel_op_shr(),
                                     in.get_main_sel_op_shl(),
                                     in.get_main_alu_in_tag(),
                                     in.get_alu_clk(),
                                     in.get_alu_ia(),
                                     in.get_alu_ib(),
                                     in.get_alu_ic(),
                                     in.get_alu_op_add(),
                                     in.get_alu_op_sub(),
                                     in.get_alu_op_mul(),
                                     in.get_alu_op_div(),
                                     in.get_alu_op_eq(),
                                     in.get_alu_op_not(),
                                     in.get_alu_op_cast(),
                                     in.get_alu_op_lt(),
                                     in.get_alu_op_lte(),
                                     in.get_alu_op_shr(),
                                     in.get_alu_op_shl(),
                                     in.get_alu_in_tag());
    }
};

template <typename FF_>
class perm_main_alu_relation : public GenericPermutationRelation<perm_main_alu_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_ALU";
};
template <typename FF_> using perm_main_alu = GenericPermutation<perm_main_alu_permutation_settings, FF_>;

/////////////////// perm_main_bin ///////////////////

class perm_main_bin_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 6;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_bin;
    static constexpr Column DST_SELECTOR = Column::binary_start;
    static constexpr Column INVERSES = Column::perm_main_bin_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_bin() == 1 || in.get_binary_start() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_bin_inv(),
                                     in.get_main_sel_bin(),
                                     in.get_main_sel_bin(),
                                     in.get_binary_start(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_main_bin_op_id(),
                                     in.get_main_r_in_tag(),
                                     in.get_binary_clk(),
                                     in.get_binary_acc_ia(),
                                     in.get_binary_acc_ib(),
                                     in.get_binary_acc_ic(),
                                     in.get_binary_op_id(),
                                     in.get_binary_in_tag());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_bin_inv(),
                                     in.get_main_sel_bin(),
                                     in.get_main_sel_bin(),
                                     in.get_binary_start(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_main_bin_op_id(),
                                     in.get_main_r_in_tag(),
                                     in.get_binary_clk(),
                                     in.get_binary_acc_ia(),
                                     in.get_binary_acc_ib(),
                                     in.get_binary_acc_ic(),
                                     in.get_binary_op_id(),
                                     in.get_binary_in_tag());
    }
};

template <typename FF_>
class perm_main_bin_relation : public GenericPermutationRelation<perm_main_bin_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_BIN";
};
template <typename FF_> using perm_main_bin = GenericPermutation<perm_main_bin_permutation_settings, FF_>;

/////////////////// perm_main_conv ///////////////////

class perm_main_conv_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 5;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_op_radix_be;
    static constexpr Column DST_SELECTOR = Column::conversion_sel_to_radix_be;
    static constexpr Column INVERSES = Column::perm_main_conv_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_op_radix_be() == 1 || in.get_conversion_sel_to_radix_be() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_conv_inv(),
                                     in.get_main_sel_op_radix_be(),
                                     in.get_main_sel_op_radix_be(),
                                     in.get_conversion_sel_to_radix_be(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_main_id(),
                                     in.get_conversion_clk(),
                                     in.get_conversion_input(),
                                     in.get_conversion_radix(),
                                     in.get_conversion_num_limbs(),
                                     in.get_conversion_output_bits());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_conv_inv(),
                                     in.get_main_sel_op_radix_be(),
                                     in.get_main_sel_op_radix_be(),
                                     in.get_conversion_sel_to_radix_be(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_main_id(),
                                     in.get_conversion_clk(),
                                     in.get_conversion_input(),
                                     in.get_conversion_radix(),
                                     in.get_conversion_num_limbs(),
                                     in.get_conversion_output_bits());
    }
};

template <typename FF_>
class perm_main_conv_relation : public GenericPermutationRelation<perm_main_conv_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_CONV";
};
template <typename FF_> using perm_main_conv = GenericPermutation<perm_main_conv_permutation_settings, FF_>;

/////////////////// perm_main_sha256 ///////////////////

class perm_main_sha256_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_op_sha256;
    static constexpr Column DST_SELECTOR = Column::sha256_sel_sha256_compression;
    static constexpr Column INVERSES = Column::perm_main_sha256_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_op_sha256() == 1 || in.get_sha256_sel_sha256_compression() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_sha256_inv(),
                                     in.get_main_sel_op_sha256(),
                                     in.get_main_sel_op_sha256(),
                                     in.get_sha256_sel_sha256_compression(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_sha256_clk(),
                                     in.get_sha256_state(),
                                     in.get_sha256_input(),
                                     in.get_sha256_output());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_sha256_inv(),
                                     in.get_main_sel_op_sha256(),
                                     in.get_main_sel_op_sha256(),
                                     in.get_sha256_sel_sha256_compression(),
                                     in.get_main_clk(),
                                     in.get_main_ia(),
                                     in.get_main_ib(),
                                     in.get_main_ic(),
                                     in.get_sha256_clk(),
                                     in.get_sha256_state(),
                                     in.get_sha256_input(),
                                     in.get_sha256_output());
    }
};

template <typename FF_>
class perm_main_sha256_relation : public GenericPermutationRelation<perm_main_sha256_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_SHA256";
};
template <typename FF_> using perm_main_sha256 = GenericPermutation<perm_main_sha256_permutation_settings, FF_>;

/////////////////// perm_main_pos2_perm ///////////////////

class perm_main_pos2_perm_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_op_poseidon2;
    static constexpr Column DST_SELECTOR = Column::poseidon2_sel_poseidon_perm;
    static constexpr Column INVERSES = Column::perm_main_pos2_perm_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_op_poseidon2() == 1 || in.get_poseidon2_sel_poseidon_perm() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_pos2_perm_inv(),
                                     in.get_main_sel_op_poseidon2(),
                                     in.get_main_sel_op_poseidon2(),
                                     in.get_poseidon2_sel_poseidon_perm(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_a(),
                                     in.get_main_mem_addr_b(),
                                     in.get_poseidon2_clk(),
                                     in.get_poseidon2_space_id(),
                                     in.get_poseidon2_input_addr(),
                                     in.get_poseidon2_output_addr());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_pos2_perm_inv(),
                                     in.get_main_sel_op_poseidon2(),
                                     in.get_main_sel_op_poseidon2(),
                                     in.get_poseidon2_sel_poseidon_perm(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_a(),
                                     in.get_main_mem_addr_b(),
                                     in.get_poseidon2_clk(),
                                     in.get_poseidon2_space_id(),
                                     in.get_poseidon2_input_addr(),
                                     in.get_poseidon2_output_addr());
    }
};

template <typename FF_>
class perm_main_pos2_perm_relation : public GenericPermutationRelation<perm_main_pos2_perm_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_POS2_PERM";
};
template <typename FF_> using perm_main_pos2_perm = GenericPermutation<perm_main_pos2_perm_permutation_settings, FF_>;

/////////////////// perm_main_mem_a ///////////////////

class perm_main_mem_a_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 8;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_a;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_a;
    static constexpr Column INVERSES = Column::perm_main_mem_a_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_mem_op_a() == 1 || in.get_mem_sel_op_a() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_a_inv(),
                                     in.get_main_sel_mem_op_a(),
                                     in.get_main_sel_mem_op_a(),
                                     in.get_mem_sel_op_a(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_a(),
                                     in.get_main_ia(),
                                     in.get_main_rwa(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_main_sel_mov_ia_to_ic(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag(),
                                     in.get_mem_sel_mov_ia_to_ic());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_a_inv(),
                                     in.get_main_sel_mem_op_a(),
                                     in.get_main_sel_mem_op_a(),
                                     in.get_mem_sel_op_a(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_a(),
                                     in.get_main_ia(),
                                     in.get_main_rwa(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_main_sel_mov_ia_to_ic(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag(),
                                     in.get_mem_sel_mov_ia_to_ic());
    }
};

template <typename FF_>
class perm_main_mem_a_relation : public GenericPermutationRelation<perm_main_mem_a_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_A";
};
template <typename FF_> using perm_main_mem_a = GenericPermutation<perm_main_mem_a_permutation_settings, FF_>;

/////////////////// perm_main_mem_b ///////////////////

class perm_main_mem_b_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 8;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_b;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_b;
    static constexpr Column INVERSES = Column::perm_main_mem_b_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_mem_op_b() == 1 || in.get_mem_sel_op_b() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_b_inv(),
                                     in.get_main_sel_mem_op_b(),
                                     in.get_main_sel_mem_op_b(),
                                     in.get_mem_sel_op_b(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_b(),
                                     in.get_main_ib(),
                                     in.get_main_rwb(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_main_sel_mov_ib_to_ic(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag(),
                                     in.get_mem_sel_mov_ib_to_ic());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_b_inv(),
                                     in.get_main_sel_mem_op_b(),
                                     in.get_main_sel_mem_op_b(),
                                     in.get_mem_sel_op_b(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_b(),
                                     in.get_main_ib(),
                                     in.get_main_rwb(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_main_sel_mov_ib_to_ic(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag(),
                                     in.get_mem_sel_mov_ib_to_ic());
    }
};

template <typename FF_>
class perm_main_mem_b_relation : public GenericPermutationRelation<perm_main_mem_b_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_B";
};
template <typename FF_> using perm_main_mem_b = GenericPermutation<perm_main_mem_b_permutation_settings, FF_>;

/////////////////// perm_main_mem_c ///////////////////

class perm_main_mem_c_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 7;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_c;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_c;
    static constexpr Column INVERSES = Column::perm_main_mem_c_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_mem_op_c() == 1 || in.get_mem_sel_op_c() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_c_inv(),
                                     in.get_main_sel_mem_op_c(),
                                     in.get_main_sel_mem_op_c(),
                                     in.get_mem_sel_op_c(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_c(),
                                     in.get_main_ic(),
                                     in.get_main_rwc(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_c_inv(),
                                     in.get_main_sel_mem_op_c(),
                                     in.get_main_sel_mem_op_c(),
                                     in.get_mem_sel_op_c(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_c(),
                                     in.get_main_ic(),
                                     in.get_main_rwc(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag());
    }
};

template <typename FF_>
class perm_main_mem_c_relation : public GenericPermutationRelation<perm_main_mem_c_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_C";
};
template <typename FF_> using perm_main_mem_c = GenericPermutation<perm_main_mem_c_permutation_settings, FF_>;

/////////////////// perm_main_mem_d ///////////////////

class perm_main_mem_d_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 7;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_mem_op_d;
    static constexpr Column DST_SELECTOR = Column::mem_sel_op_d;
    static constexpr Column INVERSES = Column::perm_main_mem_d_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_mem_op_d() == 1 || in.get_mem_sel_op_d() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_d_inv(),
                                     in.get_main_sel_mem_op_d(),
                                     in.get_main_sel_mem_op_d(),
                                     in.get_mem_sel_op_d(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_d(),
                                     in.get_main_id(),
                                     in.get_main_rwd(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_d_inv(),
                                     in.get_main_sel_mem_op_d(),
                                     in.get_main_sel_mem_op_d(),
                                     in.get_mem_sel_op_d(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_mem_addr_d(),
                                     in.get_main_id(),
                                     in.get_main_rwd(),
                                     in.get_main_r_in_tag(),
                                     in.get_main_w_in_tag(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val(),
                                     in.get_mem_rw(),
                                     in.get_mem_r_in_tag(),
                                     in.get_mem_w_in_tag());
    }
};

template <typename FF_>
class perm_main_mem_d_relation : public GenericPermutationRelation<perm_main_mem_d_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_D";
};
template <typename FF_> using perm_main_mem_d = GenericPermutation<perm_main_mem_d_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_a ///////////////////

class perm_main_mem_ind_addr_a_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_a;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_a;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_a_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_resolve_ind_addr_a() == 1 || in.get_mem_sel_resolve_ind_addr_a() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_a_inv(),
                                     in.get_main_sel_resolve_ind_addr_a(),
                                     in.get_main_sel_resolve_ind_addr_a(),
                                     in.get_mem_sel_resolve_ind_addr_a(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_a(),
                                     in.get_main_mem_addr_a(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_a_inv(),
                                     in.get_main_sel_resolve_ind_addr_a(),
                                     in.get_main_sel_resolve_ind_addr_a(),
                                     in.get_mem_sel_resolve_ind_addr_a(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_a(),
                                     in.get_main_mem_addr_a(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_a_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_a_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_IND_ADDR_A";
};
template <typename FF_>
using perm_main_mem_ind_addr_a = GenericPermutation<perm_main_mem_ind_addr_a_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_b ///////////////////

class perm_main_mem_ind_addr_b_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_b;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_b;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_b_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_resolve_ind_addr_b() == 1 || in.get_mem_sel_resolve_ind_addr_b() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_b_inv(),
                                     in.get_main_sel_resolve_ind_addr_b(),
                                     in.get_main_sel_resolve_ind_addr_b(),
                                     in.get_mem_sel_resolve_ind_addr_b(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_b(),
                                     in.get_main_mem_addr_b(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_b_inv(),
                                     in.get_main_sel_resolve_ind_addr_b(),
                                     in.get_main_sel_resolve_ind_addr_b(),
                                     in.get_mem_sel_resolve_ind_addr_b(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_b(),
                                     in.get_main_mem_addr_b(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_b_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_b_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_IND_ADDR_B";
};
template <typename FF_>
using perm_main_mem_ind_addr_b = GenericPermutation<perm_main_mem_ind_addr_b_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_c ///////////////////

class perm_main_mem_ind_addr_c_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_c;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_c;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_c_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_resolve_ind_addr_c() == 1 || in.get_mem_sel_resolve_ind_addr_c() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_c_inv(),
                                     in.get_main_sel_resolve_ind_addr_c(),
                                     in.get_main_sel_resolve_ind_addr_c(),
                                     in.get_mem_sel_resolve_ind_addr_c(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_c(),
                                     in.get_main_mem_addr_c(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_c_inv(),
                                     in.get_main_sel_resolve_ind_addr_c(),
                                     in.get_main_sel_resolve_ind_addr_c(),
                                     in.get_mem_sel_resolve_ind_addr_c(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_c(),
                                     in.get_main_mem_addr_c(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_c_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_c_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_IND_ADDR_C";
};
template <typename FF_>
using perm_main_mem_ind_addr_c = GenericPermutation<perm_main_mem_ind_addr_c_permutation_settings, FF_>;

/////////////////// perm_main_mem_ind_addr_d ///////////////////

class perm_main_mem_ind_addr_d_permutation_settings {
  public:
    // This constant defines how many columns are bundled together to form each set.
    constexpr static size_t COLUMNS_PER_SET = 4;

    // Columns using the Column enum.
    static constexpr Column SRC_SELECTOR = Column::main_sel_resolve_ind_addr_d;
    static constexpr Column DST_SELECTOR = Column::mem_sel_resolve_ind_addr_d;
    static constexpr Column INVERSES = Column::perm_main_mem_ind_addr_d_inv;

    template <typename AllEntities> static inline auto inverse_polynomial_is_computed_at_row(const AllEntities& in)
    {
        return (in.get_main_sel_resolve_ind_addr_d() == 1 || in.get_mem_sel_resolve_ind_addr_d() == 1);
    }

    template <typename AllEntities> static inline auto get_const_entities(const AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_d_inv(),
                                     in.get_main_sel_resolve_ind_addr_d(),
                                     in.get_main_sel_resolve_ind_addr_d(),
                                     in.get_mem_sel_resolve_ind_addr_d(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_d(),
                                     in.get_main_mem_addr_d(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }

    template <typename AllEntities> static inline auto get_nonconst_entities(AllEntities& in)
    {
        return std::forward_as_tuple(in.get_perm_main_mem_ind_addr_d_inv(),
                                     in.get_main_sel_resolve_ind_addr_d(),
                                     in.get_main_sel_resolve_ind_addr_d(),
                                     in.get_mem_sel_resolve_ind_addr_d(),
                                     in.get_main_clk(),
                                     in.get_main_space_id(),
                                     in.get_main_ind_addr_d(),
                                     in.get_main_mem_addr_d(),
                                     in.get_mem_clk(),
                                     in.get_mem_space_id(),
                                     in.get_mem_addr(),
                                     in.get_mem_val());
    }
};

template <typename FF_>
class perm_main_mem_ind_addr_d_relation
    : public GenericPermutationRelation<perm_main_mem_ind_addr_d_permutation_settings, FF_> {
  public:
    static constexpr std::string_view NAME = "PERM_MAIN_MEM_IND_ADDR_D";
};
template <typename FF_>
using perm_main_mem_ind_addr_d = GenericPermutation<perm_main_mem_ind_addr_d_permutation_settings, FF_>;

} // namespace bb::avm